(async () => {
  console.log("🚀 自動全ページ処理＋登録開始");

  // --- 設定 ---
  const CHECKBOX_ID = "ctl00_cplPageContent_AllCheck";
  const PAGE_LINK_SELECTOR = "a[id^='ctl00_cplPageContent_rptHeadPager_'][id*='lbnHeadPageNumber']";
  const REGISTER_BTN_ID = "ctl00_cplPageContent_RegisterBtn";
  const TITLE_FIELD_ID = "ctl00_cplPageContent_txtTitle";
  const START_FIELD_ID = "ctl00_cplPageContent_txtStartDate";
  const END_FIELD_ID = "ctl00_cplPageContent_txtEndDate";
  const CREATE_BTN_ID = "ctl00_cplPageContent_CreateUnitBtn";

  // --- 日付フォーマット関数 ---
  const today = new Date();
  const yyyy = today.getFullYear();
  const mm = String(today.getMonth() + 1).padStart(2, "0");
  const dd = String(today.getDate()).padStart(2, "0");
  const todayStr = `${yyyy}/${mm}/${dd}`;

  // --- DOM更新待機関数 ---
  const waitForPageUpdate = () => new Promise(resolve => {
    const observer = new MutationObserver((mutations, obs) => {
      const newCheckbox = document.getElementById(CHECKBOX_ID);
      if (newCheckbox) {
        obs.disconnect();
        resolve();
      }
    });
    observer.observe(document.body, { childList: true, subtree: true });
  });

  // --- 全選択 ---
  const selectAll = () => {
    const checkbox = document.getElementById(CHECKBOX_ID);
    if (checkbox) {
      checkbox.checked = true;
      checkbox.dispatchEvent(new Event("change", { bubbles: true }));
      console.log("✔ 全選択実行");
    } else {
      console.warn("⚠ チェックボックスが見つかりません。");
    }
  };

  // --- ページリンク取得 ---
  const getPageLinks = () =>
    Array.from(document.querySelectorAll(PAGE_LINK_SELECTOR))
      .filter(a => a.textContent.trim().match(/^\d+$/));

  // --- ページ巡回 ---
  let page = 1;
  selectAll();

  while (true) {
    const links = getPageLinks();
    const nextLink = links.find(a => Number(a.textContent.trim()) === page + 1);

    if (!nextLink) {
      console.log("✅ 最後のページまで到達。リスト作成処理へ。");
      break;
    }

    console.log(`➡ ページ${page} → ${page + 1} へ移動`);
    nextLink.click();
    await waitForPageUpdate();
    page++;
    selectAll();
  }

  // --- 全ページ処理後：自己学習リスト作成 ---
  const registerBtn = document.getElementById(REGISTER_BTN_ID);
  if (registerBtn) {
    console.log("🟦 「自己学習リスト作成」ボタンをクリック");
    registerBtn.click();
  } else {
    console.warn("⚠ 「自己学習リスト作成」ボタンが見つかりません。");
    return;
  }

  // --- モーダルが開くのを待つ ---
  await new Promise(res => setTimeout(res, 1000));

  // --- フィールド入力 ---
  const titleInput = document.getElementById(TITLE_FIELD_ID);
  const startInput = document.getElementById(START_FIELD_ID);
  const endInput = document.getElementById(END_FIELD_ID);

  if (titleInput && startInput && endInput) {
    titleInput.value = "⌘データ用⌘";
    startInput.value = todayStr;
    endInput.value = todayStr;

    ["input", "change"].forEach(ev => {
      titleInput.dispatchEvent(new Event(ev, { bubbles: true }));
      startInput.dispatchEvent(new Event(ev, { bubbles: true }));
      endInput.dispatchEvent(new Event(ev, { bubbles: true }));
    });

    console.log(`📝 入力完了：タイトル＝⌘データ用⌘、日付＝${todayStr}`);
  } else {
    console.warn("⚠ 入力フィールドが見つかりません。");
    return;
  }

  // --- 登録ボタンクリック ---
  const createBtn = document.getElementById(CREATE_BTN_ID);
  if (createBtn) {
    console.log("✅ 「登録する」ボタンをクリック");
    createBtn.click();
  } else {
    console.warn("⚠ 「登録する」ボタンが見つかりません。");
  }

  console.log("🎉 全処理完了！");
})();
